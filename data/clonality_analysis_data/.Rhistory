}
}
# Multiplicity calculation
# A little bit of description
Mut_tables2$Multiplicity <- apply(Mut_tables2, 1, function(x) ARGMIN_MULTIPLICITY(VAF = as.numeric(x['T_VAF']),
mCN_T = as.numeric(x['Minor_CN']),
MCN_T = as.numeric(x['Major_CN']),
TCN_T = as.numeric(x['Total_CN']),
TCN_N = 2,
purity = 1))
# Cancer Cell fraction Calculation
Mut_tables2$CCF <- apply(Mut_tables2, 1, function(x) CCF_calc(VAF = as.numeric(x['T_VAF']),
Multiplicity = as.numeric(x['Multiplicity']),
TCN_T = as.numeric(x['Total_CN']),
purity = 1))
ggplot(Mut_tables2,aes(x = CCF))+
geom_histogram(binwidth = 0.01) +
facet_grid(sampleID ~ .)
# Sample 2
Sample2 <- rbind(Sample1, New_sites1)
Sample1 <- Muts[,c('CHROM','POS','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')]
# Sample 2
Sample2 <- rbind(Sample1, New_sites1)
#Sample2 <- New_sites1
Sample2 <- Sample2[order(Sample2$CHROM, Sample2$POS),]
# Sample 3
Sample3 <- rbind(Sample1, New_sites1, New_sites2)
#Sample3 <- New_sites2
Sample3 <- Sample3[order(Sample3$CHROM, Sample3$POS),]
# Add names
Sample1 <- cbind(sampleID = 'COLO829', Sample1)
Sample2 <- cbind(sampleID = 'COLO829.2', Sample2)
Sample3 <- cbind(sampleID = 'COLO829.3', Sample3)
#-
# All samples together
#-
# Merge all samples
Mut_tables <- rbind(Sample1,Sample2,Sample3)
#-
# Compute CCF
#-
# Intersecting copy number calls with individual mutations
VCF_bed <- with(Mut_tables, GRanges(CHROM, ranges=IRanges(POS-1, POS))) # Get the GRanges object from the VCF
CN_bed <- with(CN, GRanges(chromosome, ranges=IRanges(start, end), Total_CN = copyNumber, Major_CN = majorAlleleCopyNumber, Minor_CN = minorAlleleCopyNumber))
# Intersecting both bed files
o1 <- findOverlaps(VCF_bed,CN_bed)
HITS1 <- CN_bed[subjectHits(o1)]
DF1 <- VCF_bed[queryHits(o1)]
DF1 <- as.data.frame(DF1)
HITS2 <- as.data.frame(HITS1)
HITS2$CNA_coordinates <- paste(HITS2$seqnames,HITS2$start,HITS2$end, sep = '-')
DF2 <- cbind(DF1,HITS2)
DF2 <- DF2[,c('seqnames','end','Total_CN','Major_CN','Minor_CN')]
colnames(DF2) <- c('CHROM','POS','Total_CN','Major_CN','Minor_CN')
DF2 <- unique(DF2)
# Merge both files (VCF and CN)
Mut_tables2 <- merge(Mut_tables,DF2,by=c('CHROM','POS'),all.x = T)
Mut_tables2 <- Mut_tables2[Mut_tables2$CHROM %in% paste('chr',seq(1,22), sep = ''),]
#--
# Calculate CCF
#--
# Multiplicity formula
ARGMIN_MULTIPLICITY <- function(VAF,mCN_T,MCN_T,TCN_T,TCN_N,purity){
if (MCN_T > 0){
MULTIPLICITY <- arg.min(seq(1,MCN_T,1), function(x) abs(VAF*(1/(purity*x))*(purity*TCN_T+(1-purity)*TCN_N) - 1))
return(MULTIPLICITY)
} else {
return (NA)
}
}
# Cancer Cell fraction calculation
CCF_calc <- function(VAF,Multiplicity,TCN_T,purity){
if (TCN_T > 0){
ccf <- VAF / (Multiplicity * purity) * (purity * TCN_T + 2*(1-purity))
return(ccf)
} else{
return (NA)
}
}
# Multiplicity calculation
# A little bit of description
Mut_tables2$Multiplicity <- apply(Mut_tables2, 1, function(x) ARGMIN_MULTIPLICITY(VAF = as.numeric(x['T_VAF']),
mCN_T = as.numeric(x['Minor_CN']),
MCN_T = as.numeric(x['Major_CN']),
TCN_T = as.numeric(x['Total_CN']),
TCN_N = 2,
purity = 1))
# Cancer Cell fraction Calculation
Mut_tables2$CCF <- apply(Mut_tables2, 1, function(x) CCF_calc(VAF = as.numeric(x['T_VAF']),
Multiplicity = as.numeric(x['Multiplicity']),
TCN_T = as.numeric(x['Total_CN']),
purity = 1))
ggplot(Mut_tables2,aes(x = CCF))+
geom_histogram(binwidth = 0.01) +
facet_grid(sampleID ~ .)
#--
# Find clones
#--
VCF5 <- Mut_tables2
VCF5$VAF <- VCF5$CCF/2
ggplot(Mut_tables2,aes(x = CCF/2))+
geom_histogram(binwidth = 0.01) +
facet_grid(sampleID ~ .)
VCF5 <- VCF5[VCF5$VAF < 1,]
#--
# Find clones
#--
library(mobster)
fit = mobster_fit(
VCF5,epsilon = 1e-5
)
fit = mobster_fit(
VCF5,auto_setup = "FAST"
)
plot(fit$best)
library(data.table)
library(BSgenome)
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(GenomicRanges)
library(dmr.util)
library(ggplot2)
#----------
# Simulate samples for clonality
#----------
# Function to load snp.vcf.gz from Strelka2
Load_vcf <- function(vcf_file){
VCF <- as.data.frame(fread(cmd = paste("zgrep -v '##' ", vcf_file, sep = ''), sep = '\t'))
VCF <- dplyr::rename(VCF, CHROM = `#CHROM`)
VCF <- VCF[VCF$CHROM %in% c(paste('chr',seq(1,22), sep = ''),'chrX','chrY'),]
# Parse the vcf to extract alternative counts
# We keep only the PASS mutations
VCF2 <- VCF[VCF$FILTER == 'PASS',]
# Extract normal alternative counts
VCF2 <- tidyr::separate(data = VCF2, col = NORMAL, sep = ':',
into = c('N_DP','N_FDP','N_SDP','N_SUBDP','N_AU','N_CU','N_GU','N_TU'))
VCF2$N_REF_COUNT <- apply(VCF2, 1, function(x) as.numeric(unlist(strsplit(x = x[paste('N_',x['REF'],'U', sep = '')], split = ','))[1]))
VCF2$N_ALT_COUNT <- apply(VCF2, 1, function(x) as.numeric(unlist(strsplit(x = x[paste('N_',x['ALT'],'U', sep = '')], split = ','))[1]))
VCF2$N_DP <- as.numeric(VCF2$N_DP) # We want this value to be considered as a number
# Extract tumour alternative counts
VCF2 <- tidyr::separate(data = VCF2, col = TUMOR, sep = ':',
into = c('T_DP','T_FDP','T_SDP','T_SUBDP','T_AU','T_CU','T_GU','T_TU'))
VCF2$T_REF_COUNT <- apply(VCF2, 1, function(x) as.numeric(unlist(strsplit(x = x[paste('T_',x['REF'],'U', sep = '')], split = ','))[1]))
VCF2$T_ALT_COUNT <- apply(VCF2, 1, function(x) as.numeric(unlist(strsplit(x = x[paste('T_',x['ALT'],'U', sep = '')], split = ','))[1]))
VCF2$T_DP <- as.numeric(VCF2$T_DP) # We want this value to be considered as a number
# Too many columns for now, let's keep only the important ones
VCF3 <- VCF2[,c('CHROM','POS','REF','ALT','QUAL','FILTER','N_DP','N_REF_COUNT','N_ALT_COUNT','T_DP','T_REF_COUNT','T_ALT_COUNT')]
# Compute Variant Allele Frequency (VAF) in the matched normal sample
VCF3$N_VAF <- VCF3$N_ALT_COUNT/VCF3$N_DP
# Compute Variant Allele Frequency (VAF) in the tumour sample
VCF3$T_VAF <- VCF3$T_ALT_COUNT/VCF3$T_DP
return(VCF3)
}
#----
# Load original vcf
#----
file <- '~/Documents/EMBL/CancerGenomicsCourse2023/mutational_signatures_data/COLO829T/variants/somatic.snvs.vcf.gz'
Muts <- Load_vcf(file)
#----
# Simulating mutations in diploid/tetraploid regions
#----
#---
# Copy number calls
#---
# Loading copy number calls
CN <- as.data.frame(fread('~/DATA/DATA/CancerGenomicsCourse_2023/initial_data/purple/JEVI-COLO829_T.purple.cnv.somatic.tsv'))
CN$minorAlleleCopyNumber <- round(CN$minorAlleleCopyNumber)
CN$majorAlleleCopyNumber <- round(CN$majorAlleleCopyNumber)
CN$copyNumber <- CN$majorAlleleCopyNumber + CN$minorAlleleCopyNumber
DIPLOID_SEGMENTS <- CN[(CN$copyNumber == 2 & CN$majorAlleleCopyNumber == 1) | (CN$copyNumber == 4 & CN$majorAlleleCopyNumber == 2),]
DIPLOID_SEGMENTS <- CN[(CN$copyNumber == 2 & CN$majorAlleleCopyNumber == 1),]
# Generate new sites
set.seed(1234)
New_sites <- NULL
for (row_i in seq(1,nrow(DIPLOID_SEGMENTS))){
ROW <- DIPLOID_SEGMENTS[row_i,]
if (ROW$end - ROW$start > 5000){
SITES <- sort(sample(ROW$end:ROW$start, 2000, replace=FALSE))
CNA_coordinates <- paste(ROW$chromosome,ROW$start,ROW$end, sep = '-')
SITES <- data.frame(CHROM = ROW$chromosome, start = SITES, end = SITES, CNA_coordinates)
New_sites[[row_i]] <- SITES
}
}
New_sites <- do.call("rbind", New_sites)
New_sites$T_DP <- rpois(n = nrow(New_sites),lambda = mean(Muts$T_DP))
# Expected nucleotides
NUCLEOTIDES <- c("A",'C','T','G')
# Clone 1
# 7500 variants
New_sites1 <- New_sites[sample(x = nrow(New_sites), size = 8000),]
New_sites1$T_ALT_COUNT <- rbinom(n = nrow(New_sites1), size = New_sites1$T_DP, prob = 0.25)
New_sites1$T_REF_COUNT <- New_sites1$T_DP - New_sites1$T_ALT_COUNT
New_sites1$T_VAF <- New_sites1$T_ALT_COUNT / New_sites1$T_DP
New_sites1$REF <- as.character(Biostrings::getSeq(x = Hsapiens, names = New_sites1$CHROM, start = New_sites1$start, end = New_sites1$end))
New_sites1$ALT <- apply(New_sites1,1,function(x) sample(NUCLEOTIDES[!NUCLEOTIDES %in% x['REF']],1))
New_sites1 <- New_sites1[New_sites1$REF != 'N',]
New_sites1 <- New_sites1[,c('CHROM','start','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')]
colnames(New_sites1) <- c('CHROM','POS','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')
# Clone 2
# 2500 variants
New_sites2 <- New_sites[sample(x = nrow(New_sites), size = nrow(New_sites) - nrow(New_sites1)),]
New_sites2$T_ALT_COUNT <- rbinom(n = nrow(New_sites2), size = New_sites2$T_DP, prob = 0.15)
New_sites2$T_REF_COUNT <- New_sites2$T_DP - New_sites2$T_ALT_COUNT
New_sites2$T_VAF <- New_sites2$T_ALT_COUNT / New_sites2$T_DP
New_sites2$REF <- as.character(Biostrings::getSeq(x = Hsapiens, names = New_sites2$CHROM, start = New_sites2$start, end = New_sites2$end))
New_sites2$ALT <- apply(New_sites2,1,function(x) sample(NUCLEOTIDES[!NUCLEOTIDES %in% x['REF']],1))
New_sites2 <- New_sites2[New_sites2$REF != 'N',]
New_sites2 <- New_sites2[,c('CHROM','start','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')]
colnames(New_sites2) <- c('CHROM','POS','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')
#------
# Create samples
#------
# Sample 1
Sample1 <- Muts[,c('CHROM','POS','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')]
# Sample 2
Sample2 <- rbind(Sample1, New_sites1)
#Sample2 <- New_sites1
Sample2 <- Sample2[order(Sample2$CHROM, Sample2$POS),]
# Sample 3
Sample3 <- rbind(Sample1, New_sites1, New_sites2)
#Sample3 <- New_sites2
Sample3 <- Sample3[order(Sample3$CHROM, Sample3$POS),]
# Add names
Sample1 <- cbind(sampleID = 'COLO829', Sample1)
Sample2 <- cbind(sampleID = 'COLO829.2', Sample2)
Sample3 <- cbind(sampleID = 'COLO829.3', Sample3)
#-
# All samples together
#-
# Merge all samples
Mut_tables <- rbind(Sample1,Sample2,Sample3)
#-
# Compute CCF
#-
# Intersecting copy number calls with individual mutations
VCF_bed <- with(Mut_tables, GRanges(CHROM, ranges=IRanges(POS-1, POS))) # Get the GRanges object from the VCF
CN_bed <- with(CN, GRanges(chromosome, ranges=IRanges(start, end), Total_CN = copyNumber, Major_CN = majorAlleleCopyNumber, Minor_CN = minorAlleleCopyNumber))
# Intersecting both bed files
o1 <- findOverlaps(VCF_bed,CN_bed)
HITS1 <- CN_bed[subjectHits(o1)]
DF1 <- VCF_bed[queryHits(o1)]
DF1 <- as.data.frame(DF1)
HITS2 <- as.data.frame(HITS1)
HITS2$CNA_coordinates <- paste(HITS2$seqnames,HITS2$start,HITS2$end, sep = '-')
DF2 <- cbind(DF1,HITS2)
DF2 <- DF2[,c('seqnames','end','Total_CN','Major_CN','Minor_CN')]
colnames(DF2) <- c('CHROM','POS','Total_CN','Major_CN','Minor_CN')
DF2 <- unique(DF2)
# Merge both files (VCF and CN)
Mut_tables2 <- merge(Mut_tables,DF2,by=c('CHROM','POS'),all.x = T)
Mut_tables2 <- Mut_tables2[Mut_tables2$CHROM %in% paste('chr',seq(1,22), sep = ''),]
#--
# Calculate CCF
#--
# Multiplicity formula
ARGMIN_MULTIPLICITY <- function(VAF,mCN_T,MCN_T,TCN_T,TCN_N,purity){
if (MCN_T > 0){
MULTIPLICITY <- arg.min(seq(1,MCN_T,1), function(x) abs(VAF*(1/(purity*x))*(purity*TCN_T+(1-purity)*TCN_N) - 1))
return(MULTIPLICITY)
} else {
return (NA)
}
}
# Cancer Cell fraction calculation
CCF_calc <- function(VAF,Multiplicity,TCN_T,purity){
if (TCN_T > 0){
ccf <- VAF / (Multiplicity * purity) * (purity * TCN_T + 2*(1-purity))
return(ccf)
} else{
return (NA)
}
}
# Multiplicity calculation
# A little bit of description
Mut_tables2$Multiplicity <- apply(Mut_tables2, 1, function(x) ARGMIN_MULTIPLICITY(VAF = as.numeric(x['T_VAF']),
mCN_T = as.numeric(x['Minor_CN']),
MCN_T = as.numeric(x['Major_CN']),
TCN_T = as.numeric(x['Total_CN']),
TCN_N = 2,
purity = 1))
# Cancer Cell fraction Calculation
Mut_tables2$CCF <- apply(Mut_tables2, 1, function(x) CCF_calc(VAF = as.numeric(x['T_VAF']),
Multiplicity = as.numeric(x['Multiplicity']),
TCN_T = as.numeric(x['Total_CN']),
purity = 1))
ggplot(Mut_tables2,aes(x = CCF/2))+
geom_histogram(binwidth = 0.01) +
facet_grid(sampleID ~ .)
#--
# Find clones
#--
# library(mobster)
#
# VCF5 <- Mut_tables2
# VCF5$VAF <- VCF5$CCF/2
# VCF5 <- VCF5[VCF5$VAF < 1,]
#
# fit = mobster_fit(
#   VCF5,auto_setup = "FAST"
# )
ggplot(Mut_tables2,aes(x = CCF/2))+
geom_histogram(binwidth = 0.01) +
facet_grid(sampleID ~ .)
ggplot(Mut_tables2,aes(x = CCF))+
geom_histogram(binwidth = 0.01) +
facet_grid(sampleID ~ .)
# Out directory
OUTF <- '~/DATA/DATA/CancerGenomicsCourse_2023/course_data/clonality_analysis'
dir.create(OUTF)
setwd(OUTF)
# Save tables
write.table(Sample1, file = "COLO829T.muts.tsv", sep = '\t', col.names = T, row.names = F, quote = F)
# Mut tables with CN
write.table(Mut_tables2, file = "All_colos.muts_with_CN.tsv", sep = '\t', col.names = T, row.names = F, quote = F)
View(CN)
CN$Ploidy <- 3.1000
library(data.table)
library(BSgenome)
ref_genome <- "BSgenome.Hsapiens.UCSC.hg38"
library(ref_genome, character.only = TRUE)
library(GenomicRanges)
library(dmr.util)
library(ggplot2)
#----------
# Simulate samples for clonality
#----------
# Function to load snp.vcf.gz from Strelka2
Load_vcf <- function(vcf_file){
VCF <- as.data.frame(fread(cmd = paste("zgrep -v '##' ", vcf_file, sep = ''), sep = '\t'))
VCF <- dplyr::rename(VCF, CHROM = `#CHROM`)
VCF <- VCF[VCF$CHROM %in% c(paste('chr',seq(1,22), sep = ''),'chrX','chrY'),]
# Parse the vcf to extract alternative counts
# We keep only the PASS mutations
VCF2 <- VCF[VCF$FILTER == 'PASS',]
# Extract normal alternative counts
VCF2 <- tidyr::separate(data = VCF2, col = NORMAL, sep = ':',
into = c('N_DP','N_FDP','N_SDP','N_SUBDP','N_AU','N_CU','N_GU','N_TU'))
VCF2$N_REF_COUNT <- apply(VCF2, 1, function(x) as.numeric(unlist(strsplit(x = x[paste('N_',x['REF'],'U', sep = '')], split = ','))[1]))
VCF2$N_ALT_COUNT <- apply(VCF2, 1, function(x) as.numeric(unlist(strsplit(x = x[paste('N_',x['ALT'],'U', sep = '')], split = ','))[1]))
VCF2$N_DP <- as.numeric(VCF2$N_DP) # We want this value to be considered as a number
# Extract tumour alternative counts
VCF2 <- tidyr::separate(data = VCF2, col = TUMOR, sep = ':',
into = c('T_DP','T_FDP','T_SDP','T_SUBDP','T_AU','T_CU','T_GU','T_TU'))
VCF2$T_REF_COUNT <- apply(VCF2, 1, function(x) as.numeric(unlist(strsplit(x = x[paste('T_',x['REF'],'U', sep = '')], split = ','))[1]))
VCF2$T_ALT_COUNT <- apply(VCF2, 1, function(x) as.numeric(unlist(strsplit(x = x[paste('T_',x['ALT'],'U', sep = '')], split = ','))[1]))
VCF2$T_DP <- as.numeric(VCF2$T_DP) # We want this value to be considered as a number
# Too many columns for now, let's keep only the important ones
VCF3 <- VCF2[,c('CHROM','POS','REF','ALT','QUAL','FILTER','N_DP','N_REF_COUNT','N_ALT_COUNT','T_DP','T_REF_COUNT','T_ALT_COUNT')]
# Compute Variant Allele Frequency (VAF) in the matched normal sample
VCF3$N_VAF <- VCF3$N_ALT_COUNT/VCF3$N_DP
# Compute Variant Allele Frequency (VAF) in the tumour sample
VCF3$T_VAF <- VCF3$T_ALT_COUNT/VCF3$T_DP
return(VCF3)
}
#----
# Load original vcf
#----
# Out directory
OUTF <- '~/DATA/DATA/CancerGenomicsCourse_2023/course_data/clonality_analysis'
dir.create(OUTF)
setwd(OUTF)
#-----
file <- '~/Documents/EMBL/CancerGenomicsCourse2023/mutational_signatures_data/COLO829T/variants/somatic.snvs.vcf.gz'
Muts <- Load_vcf(file)
#----
# Simulating mutations in diploid/tetraploid regions
#----
#---
# Copy number calls
#---
# Loading copy number calls
CN <- as.data.frame(fread('~/DATA/DATA/CancerGenomicsCourse_2023/initial_data/purple/JEVI-COLO829_T.purple.cnv.somatic.tsv'))
CN$minorAlleleCopyNumber <- round(CN$minorAlleleCopyNumber)
CN$majorAlleleCopyNumber <- round(CN$majorAlleleCopyNumber)
CN$copyNumber <- CN$majorAlleleCopyNumber + CN$minorAlleleCopyNumber
CN$Ploidy <- 3.1000
CN$Purity <- 1
write.table(CN, file = "COLO829T.CN_purple.tsv", sep = '\t', col.names = T, row.names = F, quote = F)
DIPLOID_SEGMENTS <- CN[(CN$copyNumber == 2 & CN$majorAlleleCopyNumber == 1) | (CN$copyNumber == 4 & CN$majorAlleleCopyNumber == 2),]
DIPLOID_SEGMENTS <- CN[(CN$copyNumber == 2 & CN$majorAlleleCopyNumber == 1),]
# Generate new sites
set.seed(1234)
New_sites <- NULL
for (row_i in seq(1,nrow(DIPLOID_SEGMENTS))){
ROW <- DIPLOID_SEGMENTS[row_i,]
if (ROW$end - ROW$start > 5000){
SITES <- sort(sample(ROW$end:ROW$start, 2000, replace=FALSE))
CNA_coordinates <- paste(ROW$chromosome,ROW$start,ROW$end, sep = '-')
SITES <- data.frame(CHROM = ROW$chromosome, start = SITES, end = SITES, CNA_coordinates)
New_sites[[row_i]] <- SITES
}
}
New_sites <- do.call("rbind", New_sites)
New_sites$T_DP <- rpois(n = nrow(New_sites),lambda = mean(Muts$T_DP))
# Expected nucleotides
NUCLEOTIDES <- c("A",'C','T','G')
# Clone 1
# 7500 variants
New_sites1 <- New_sites[sample(x = nrow(New_sites), size = 8000),]
New_sites1$T_ALT_COUNT <- rbinom(n = nrow(New_sites1), size = New_sites1$T_DP, prob = 0.25)
New_sites1$T_REF_COUNT <- New_sites1$T_DP - New_sites1$T_ALT_COUNT
New_sites1$T_VAF <- New_sites1$T_ALT_COUNT / New_sites1$T_DP
New_sites1$REF <- as.character(Biostrings::getSeq(x = Hsapiens, names = New_sites1$CHROM, start = New_sites1$start, end = New_sites1$end))
New_sites1$ALT <- apply(New_sites1,1,function(x) sample(NUCLEOTIDES[!NUCLEOTIDES %in% x['REF']],1))
New_sites1 <- New_sites1[New_sites1$REF != 'N',]
New_sites1 <- New_sites1[,c('CHROM','start','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')]
colnames(New_sites1) <- c('CHROM','POS','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')
# Clone 2
# 2500 variants
New_sites2 <- New_sites[sample(x = nrow(New_sites), size = nrow(New_sites) - nrow(New_sites1)),]
New_sites2$T_ALT_COUNT <- rbinom(n = nrow(New_sites2), size = New_sites2$T_DP, prob = 0.15)
New_sites2$T_REF_COUNT <- New_sites2$T_DP - New_sites2$T_ALT_COUNT
New_sites2$T_VAF <- New_sites2$T_ALT_COUNT / New_sites2$T_DP
New_sites2$REF <- as.character(Biostrings::getSeq(x = Hsapiens, names = New_sites2$CHROM, start = New_sites2$start, end = New_sites2$end))
New_sites2$ALT <- apply(New_sites2,1,function(x) sample(NUCLEOTIDES[!NUCLEOTIDES %in% x['REF']],1))
New_sites2 <- New_sites2[New_sites2$REF != 'N',]
New_sites2 <- New_sites2[,c('CHROM','start','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')]
colnames(New_sites2) <- c('CHROM','POS','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')
#------
# Create samples
#------
# Sample 1
Sample1 <- Muts[,c('CHROM','POS','REF','ALT','T_ALT_COUNT','T_REF_COUNT','T_DP','T_VAF')]
# Sample 2
Sample2 <- rbind(Sample1, New_sites1)
#Sample2 <- New_sites1
Sample2 <- Sample2[order(Sample2$CHROM, Sample2$POS),]
# Sample 3
Sample3 <- rbind(Sample1, New_sites1, New_sites2)
#Sample3 <- New_sites2
Sample3 <- Sample3[order(Sample3$CHROM, Sample3$POS),]
# Add names
Sample1 <- cbind(sampleID = 'COLO829T', Sample1)
Sample2 <- cbind(sampleID = 'COLO829.2', Sample2)
Sample3 <- cbind(sampleID = 'COLO829.3', Sample3)
# Save tables
write.table(Sample1, file = "COLO829T.muts.tsv", sep = '\t', col.names = T, row.names = F, quote = F)
write.table(Sample2, file = "COLO829T_2.muts.tsv", sep = '\t', col.names = T, row.names = F, quote = F)
write.table(Sample3, file = "COLO829T_3.muts.tsv", sep = '\t', col.names = T, row.names = F, quote = F)
#-
# All samples together
#-
# Merge all samples
Mut_tables <- rbind(Sample1,Sample2,Sample3)
#-
# Compute CCF
#-
# Intersecting copy number calls with individual mutations
VCF_bed <- with(Mut_tables, GRanges(CHROM, ranges=IRanges(POS-1, POS))) # Get the GRanges object from the VCF
CN_bed <- with(CN, GRanges(chromosome, ranges=IRanges(start, end), Total_CN = copyNumber, Major_CN = majorAlleleCopyNumber, Minor_CN = minorAlleleCopyNumber))
# Intersecting both bed files
o1 <- findOverlaps(VCF_bed,CN_bed)
HITS1 <- CN_bed[subjectHits(o1)]
DF1 <- VCF_bed[queryHits(o1)]
DF1 <- as.data.frame(DF1)
HITS2 <- as.data.frame(HITS1)
HITS2$CNA_coordinates <- paste(HITS2$seqnames,HITS2$start,HITS2$end, sep = '-')
DF2 <- cbind(DF1,HITS2)
DF2 <- DF2[,c('seqnames','end','Total_CN','Major_CN','Minor_CN')]
colnames(DF2) <- c('CHROM','POS','Total_CN','Major_CN','Minor_CN')
DF2 <- unique(DF2)
# Merge both files (VCF and CN)
Mut_tables2 <- merge(Mut_tables,DF2,by=c('CHROM','POS'),all.x = T)
Mut_tables2 <- Mut_tables2[Mut_tables2$CHROM %in% paste('chr',seq(1,22), sep = ''),]
#--
# Calculate CCF
#--
# Multiplicity formula
ARGMIN_MULTIPLICITY <- function(VAF,mCN_T,MCN_T,TCN_T,TCN_N,purity){
if (MCN_T > 0){
MULTIPLICITY <- arg.min(seq(1,MCN_T,1), function(x) abs(VAF*(1/(purity*x))*(purity*TCN_T+(1-purity)*TCN_N) - 1))
return(MULTIPLICITY)
} else {
return (NA)
}
}
# Cancer Cell fraction calculation
CCF_calc <- function(VAF,Multiplicity,TCN_T,purity){
if (TCN_T > 0){
ccf <- VAF / (Multiplicity * purity) * (purity * TCN_T + 2*(1-purity))
return(ccf)
} else{
return (NA)
}
}
# Multiplicity calculation
# A little bit of description
Mut_tables2$Multiplicity <- apply(Mut_tables2, 1, function(x) ARGMIN_MULTIPLICITY(VAF = as.numeric(x['T_VAF']),
mCN_T = as.numeric(x['Minor_CN']),
MCN_T = as.numeric(x['Major_CN']),
TCN_T = as.numeric(x['Total_CN']),
TCN_N = 2,
purity = 1))
# Cancer Cell fraction Calculation
Mut_tables2$CCF <- apply(Mut_tables2, 1, function(x) CCF_calc(VAF = as.numeric(x['T_VAF']),
Multiplicity = as.numeric(x['Multiplicity']),
TCN_T = as.numeric(x['Total_CN']),
purity = 1))
# Mut tables with CN
write.table(Mut_tables2, file = "All_COLO829Ts.muts_with_CN.tsv", sep = '\t', col.names = T, row.names = F, quote = F)
#--
# Find clones
#--
# library(mobster)
#
# VCF5 <- Mut_tables2
# VCF5$VAF <- VCF5$CCF/2
# VCF5 <- VCF5[VCF5$VAF < 1,]
#
# fit = mobster_fit(
#   VCF5,auto_setup = "FAST"
# )
